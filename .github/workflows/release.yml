name: Release
permissions:
    contents: write

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Check formatting
        run: cargo fmt --check
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Run tests
        run: cargo test --verbose
      - name: Build
        run: cargo build --verbose

  build-release-assets:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: wally-vendor-x86_64-unknown-linux-gnu
            asset_name: wally-vendor-x86_64-unknown-linux-gnu.tar.gz

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: wally-vendor-x86_64-pc-windows-msvc
            asset_name: wally-vendor-x86_64-pc-windows-msvc.zip

          - os: macos-13
            target: x86_64-apple-darwin
            artifact_name: wally-vendor-x86_64-apple-darwin
            asset_name: wally-vendor-x86_64-apple-darwin.tar.gz

          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: wally-vendor-aarch64-apple-darwin
            asset_name: wally-vendor-aarch64-apple-darwin.tar.gz
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build binary
        run: cargo build --verbose --release --target ${{ matrix.target }}
      - name: Prepare artifact for Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mv target/${{ matrix.target }}/release/wally-vendor.exe .
          7z a ${{ matrix.asset_name }} wally-vendor.exe
      - name: Prepare artifact for Unix
        if: runner.os != 'Windows'
        run: |
          mv target/${{ matrix.target }}/release/wally-vendor .
          tar czvf ${{ matrix.asset_name }} wally-vendor
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.asset_name }}

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build-release-assets
    steps:
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
            files: |
                release-artifacts/*/*.tar.gz
                release-artifacts/*/*.zip
            generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-crates-io:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [test, build-release-assets, publish-release]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}